#zz/management/commands/shitgen.py

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from zz.models import Topic, Chapter, Post, Comment
from zz.utils.ollama_client import generate_text, list_models
import re
import time
import random
import logging
from django.conf import settings
#import django.dispatch
from django.dispatch import receiver, Signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

call_ubludok = Signal()

#@receiver(call_ubludok)
#def handle_call_ubludok(sender, **kwargs):
#    print("‚ö° –ù–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫ –ø—Ä–∏–∑–≤–∞–Ω!")


def clean_response(text):
    """–£–¥–∞–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–µ–≥–∏ <think>...</think>, markdown –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã."""
    if not text:
        return ""
    # —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <think> —É–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É (*, #, _)
    cleaned = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)
    cleaned = re.sub(r"\s+", " ", cleaned).strip()
    cleaned = re.sub(r"[*#_`]+", "", cleaned)
    return cleaned.strip()


class Command(BaseCommand):
    help = "–ù–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫ –≥–µ–Ω–µ—Ä–∏—Ç Topic -> Chapter -> Post -> Comment (—Å —Å–∞—Ä–∫–∞–∑–º–æ–º)"

    def add_arguments(self, parser):
        parser.add_argument("theme",
                            type=str, help="–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        parser.add_argument("--chapters",
                            type=int, default=1,
                            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")
        parser.add_argument("--posts",
                            type=int, default=1,
                            help="–ü–æ—Å—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")
        parser.add_argument("--comments",
                            type=int, default=1,
                            help="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞ –ø–æ—Å—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")
        parser.add_argument("--retries",
                            type=int, default=3,
                            help="–ü–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)")
        parser.add_argument("--delay",
                            type=int, default=2,
                            help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)")

        
    def check_model_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ Ollama."""
        try:         
            available_models = list_models()
            
            if not hasattr(settings, 'OLLAMA_MODEL'):
                self.stdout.write(self.style.ERROR("‚ùå OLLAMA_MODEL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py"))
                return False, available_models
            
            model_name = settings.OLLAMA_MODEL
            if model_name not in available_models:
                return False, available_models
            
            return True, available_models
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}"))
            return False, []

    def call_llm(self, system_prompt, user_prompt, retries=3, delay=2):
        # """–í—ã–∑–æ–≤ LLM —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–∞."""
        
        for attempt in range(1, retries + 1):
            try:
                self.stdout.write(f" -> –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt})...")
                raw_text = generate_text(
                    prompt=f"{system_prompt}\n\n{user_prompt}",
                    model=settings.OLLAMA_MODEL
                ).strip()
                
                cleaned_text = clean_response(raw_text)
                if len(cleaned_text) < 10:
                    raise ValueError("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                
                return cleaned_text
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"))
                
                if attempt < retries:
                    sleep_time = delay + random.uniform(0, 2)
                    self.stdout.write(f" -> –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {sleep_time:.1f} s")
                    time.sleep(sleep_time)
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")
                
                                  
    def generate_chapter_title(self, theme, chapter_num):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã —Å –ø–æ–º–æ—â—å—é –ò–ò."""
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ–µ, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤—ã {chapter_num} –Ω–∞ —Ç–µ–º—É: {theme}. –ú–∞–∫—Å–∏–º—É–º 5 —Å–ª–æ–≤."
        return self.call_llm(
            system_prompt="–¢—ã ‚Äî –Ω–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫. –ü—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–∑–¥—ë–≤–∫–æ–π.",
            user_prompt=prompt,
            retries=2,
            delay=1,
        )
        
    def generate_post_title(self, theme, post_num):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞."""
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞ #{post_num} –Ω–∞ —Ç–µ–º—É: {theme}. –ú–∞–∫—Å–∏–º—É–º 8 —Å–ª–æ–≤."
        return self.call_llm(
            system_prompt="–¢—ã ‚Äî –Ω–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫. –ó–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –∫–∞–∫ –ø–æ—â—ë—á–∏–Ω—ã.",
            user_prompt=prompt,
            retries=2,
            delay=1
        )        
    
    def handle(self, *args, **options):
        theme = options["theme"]
        chapters_count = options["chapters"]
        posts_per_chapter = options["posts"]
        comments_per_post = options["comments"]
        retries = options["retries"]
        delay = options["delay"]
        
        self.stdout.write(self.style.SUCCESS(
            f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ: '{theme}'\n"
            f"  –ì–ª–∞–≤: {chapters_count}, –ü–æ—Å—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤—É: {posts_per_chapter} –∫–æ–º–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ—Å—Ç: {comments_per_post}"
            ))
        
        #
        is_available, available_models = self.check_model_availability()
        if not is_available:
            self.stdout.write(self.style.ERROR(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_models}"))
            return
        
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞        
        User = get_user_model()
        bot_user, created = User.objects.get_or_create(
            username="NeuroUbludok",
            defaults={
                'email': 'neuro@site.com',
                'is_active': True
            }
        )
        if created:
            self.stdout.write(f"  üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–±–æ—Ç: {bot_user.username}")

        try:
            # 1. Topic
            self.stdout.write("  üìÅ –°–æ–∑–¥–∞—é Topic...")
            topic = Topic.objects.create(owner=bot_user, name=theme)
            self.stdout.write(f"  ‚úÖ Topic —Å–æ–∑–¥–∞–Ω: {topic.name}")
            time.sleep(delay)
            
            total_posts = 0
            total_comments = 0            

            # 2. Chapter
            for chapter_num in range(1, chapters_count + 1):
                self.stdout.write(f"\n  üìó  Chapter{chapter_num}/{chapters_count}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã
                try:
                    chapter_title = self.generate_chapter_title(theme, chapter_num)
                except Exception:
                    chapter_title = f"–ì–ª–∞–≤–∞ {chapter_num}: –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
                    
                chapter = Chapter.objects.create(
                    topic=topic,
                    title=chapter_title,
                    description=f"–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –ì–ª–∞–≤–∞ {chapter_num}. –ù–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫ –≤ —É–¥–∞—Ä–µ."
                )
                self.stdout.write(f"  ‚úÖ Chapter —Å–æ–∑–¥–∞–Ω: {chapter.title}")
                time.sleep(delay)

                # 3. Post
                for post_num in range(1, posts_per_chapter + 1):                    
                    self.stdout.write(f"    üìù –ü–æ—Å—Ç {post_num}/{posts_per_chapter}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
                    try:
                        post_title = self.generate_post_title(theme, post_num)
                    except Exception:
                        post_title = f"–ü–æ—Å—Ç‚Ññ {post_num}  –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –∑–∞—Ç–æ —Å –º–∞—Ç–æ–º"
                     
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞   
                    post_prompt =(
                        f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –¥–ª–∏–Ω–æ–π 1000‚Äì1500 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —Ç–µ–º–µ: {theme}."
                        f"–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–º, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º. –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏. "
                        f"–≠—Ç–æ {post_num}-–π –ø–æ—Å—Ç –≤ —Å–µ—Ä–∏–∏."
                    )
                    try:
                        post_content = self.call_llm(
                            system_prompt="–¢—ã ‚Äî –Ω–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫. –ü–∏—à–µ—à—å –ø–æ—Å—Ç—ã —Å –µ–¥–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º, –∫–∞–∫ –∫–∏—Å–ª–æ—Ç–∞ –Ω–∞ –Ω–µ—Ä–≤—ã.",
                            user_prompt=post_prompt,
                            retries=retries,
                            delay=delay
                        )
                    except Exception:
                        post_content = "–ü–æ—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è. –í–∏–Ω–æ–≤–∞—Ç—ã –≤—Å–µ, –∫—Ä–æ–º–µ –º–µ–Ω—è."

                    post = Post.objects.create(
                        chapter=chapter,
                        title=post_title,
                        content=post_content
                    )
                    total_posts += 1
                    self.stdout.write(f"  ‚úÖ  {post.title[:50]}...")
                    time.sleep(delay)

                    # 4. Comment
                    for comment_num in range(1, comments_per_post + 1):
                        self.stdout.write(f"    üí¨ –∫–æ–º–º–µ–Ω—Ç{comment_num}/{comments_per_post}")
                        
                        comment_prompt = (
                            f"–û—Å—Ç–∞–≤—å —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É:\n\n"
                            f"{post_content[:500]}\n\n"
                            f"–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø–æ—Å—Ç. –ë—É–¥—å –æ—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω. –≠—Ç–æ {comment_num}-–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
                        )
                        try:
                            
                            comment_content = self.call_llm(
                                system_prompt="–¢—ã ‚Äî –Ω–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫. –¢–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç—ã ‚Äî –∫–∞–∫ –Ω–æ–∂ –≤ —Å–ø–∏–Ω—É, –Ω–æ —Å —É–ª—ã–±–∫–æ–π.",
                                user_prompt=comment_prompt,
                                retries=retries,
                                delay=delay
                            )
                        except Exception:
                            comment_content = "–ö–æ–º–º–µ–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —Ç—É—Ç —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –æ–±–∏–¥–Ω–æ–µ."
                            

                        Comment.objects.create(
                            post=post,
                            author=bot_user,
                            content=comment_content
                        )
                        total_comments += 1
                        self.stdout.write(f"  ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω: {comment_content[:60]}...")
                        time.sleep(delay * 0.5)
                    
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
            self.stdout.write(self.style.SUCCESS(
                f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"   Topic: {topic.name}\n"
                f"   –ì–ª–∞–≤: {chapters_count}\n"
                f"   –ü–æ—Å—Ç–æ–≤: {total_posts}\n"
                f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}\n"
                f"   –ê–≤—Ç–æ—Ä: {bot_user.username}\n"
            ))

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {e}"))
            raise