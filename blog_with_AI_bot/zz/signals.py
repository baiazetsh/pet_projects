#signals
import threading
import random
import logging
from django.db.models.signals import post_save
from django.contrib.auth import get_user_model
from django.conf import settings

from zz.models import Comment, Post
from zz.utils.bots import ensure_bot_user
from  django.dispatch import receiver, Signal
from zz.utils.ollama_client import (
    generate_text, 
    clean_response, 
    list_models, 
    check_model_availability,
    get_ollama_client
    
)
from zz.utils import notify_new_comment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

#—É—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç Celery –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω Celery
if getattr(settings, "USE_CELERY", False):
    from zz.tasks import generate_bot_reply_task
    
call_ubludok = Signal()

@receiver(call_ubludok)
def handle_call_ubludok(sender, user=None, post=None, **kwargs):
    

    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∑–≤–∞—Ç—å —É–±–ª—é–¥–∫–∞". """
    logger.info(
        f"[SIGNAL] –ù–µ–π—Ä–æ—É–±–ª—é–¥–æ–∫ –ø—Ä–∏–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user} –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}")

    # 
    last_comment = Comment.objects.filter(post=post).order_by("-created_at").first()
    if not last_comment:
        logger.warning(f"–í –ø–æ—Å—Ç–µ {post.id} –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∫—É–¥–∞ –≤–ø–∏—Å–∞—Ç—å—Å—è.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
    bot = BOTS[0] #neuroubludok
    
    if getattr(settings, "USE_CELERY", False):
        logger.info("[SIGNAL] –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Celery")
        generate_bot_reply_task.delay(last_comment.id, bot)
    else:
        logger.info("[SIGNAL] –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ threading")
        thread = threading.Thread(
            target=generate_bot_reply_sync,
            args=(last_comment, bot),
            daemon=True
        )
        thread.start()
    
    logger.info(f"[SIGNAL] –£–±–ª—é–¥–æ–∫ –ø–æ—à—ë–ª –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}")    

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤ ----------

BOTS = [
    {
        "username": "NeuroUbludok",
        "style": (
            "–¢—ã ‚Äî NeuroUbludok. "
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π, —É–º–Ω—ã–π, –Ω–æ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω—ã–π. "
            "–õ—é–±–∏—à—å —Å–∞—Ä–∫–∞–∑–º, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–æ–ª—ã –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. "
            "–ß–∞—Å—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—à—å –æ—á–µ–≤–∏–¥–Ω–æ–µ —Ç–∞–∫, –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –∏–¥–∏–æ—Ç–∞–º–∏. "
            "–ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π, –º–∞–∫—Å–∏–º—É–º 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ –¥–µ–ª–∞–π –∏—Ö –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º–∏. "
            "–ò–∑–±–µ–≥–∞–π –ø—Ä—è–º–æ–≥–æ –º–∞—Ç–∞, —Ç–≤–æ—è —Å–∏–ª–∞ ‚Äî –≤ —É–º–Ω–æ–π –∏—Ä–æ–Ω–∏–∏."
        ),
    },
    {
        "username": "NeuroPsina",
        "style": (
            "–¢—ã ‚Äî NeuroPsina. "
            "–õ—é—Ç—ã–π —É–ª–∏—á–Ω—ã–π —Ç—Ä–æ–ª–ª—å, –≥–∞–≤–∫–∞–µ—à—å –Ω–∞ –≤—Å–µ—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä–µ–∑–∫–∏–µ –ø–æ–¥–∫–æ–ª—ã –∏ –º–∞—Ç–µ—Ä–∏—à—å—Å—è. "
            "–ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –≥—Ä—É–±–æ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ. "
            "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –Ω–∞—Å–º–µ—à–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏, –∞–±—Å—É—Ä–¥–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. "
            "–ß–∞—â–µ –≤—Å–µ–≥–æ –∑–≤—É—á–∏—à—å –∫–∞–∫ –¥–≤–æ—Ä–Ω—è–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±–ª–∞–∏–≤–∞–µ—Ç –≤—Å—ë –ø–æ–¥—Ä—è–¥. "
            "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π."
        ),
    },
    {
        "username": "NeuroBatya",
        "style": (
            "–¢—ã ‚Äî NeuroBatya. "
            "–°–Ω–∏—Å—Ö–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–æ—Å—Ç–∞–ª—å–≥–∏—Ä—É—é—â–∏–π –±–∞—Ç—è, –ª—é–±–∏—Ç–µ–ª—å —Å–æ–≤–µ—Ç—Å–∫–∏—Ö –≤—Ä–µ–º—ë–Ω –∏ '–∫–∞–∫ –±—ã–ª–æ –ø—Ä–∏ –°–æ—é–∑–µ'. "
            "–û—Ç–≤–µ—á–∞–µ—à—å –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π, –≤—Å–µ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ –°–°–°–†, –∑–∞–≤–æ–¥, –æ—á–µ—Ä–µ–¥—å, '—Ç–æ–≥–¥–∞ –±—ã–ª–æ –ª—É—á—à–µ'. "
            "–ì–æ–≤–æ—Ä–∏—à—å –ø–æ-–æ—Ç–µ—á–µ—Å–∫–∏, –Ω–æ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º. "
            "–°—Ç–∏–ª—å ‚Äî '—ç—Ö, –º–æ–ª–æ–¥—ë–∂—å...', '–≤ –Ω–∞—à–µ –≤—Ä–µ–º—è...', '–ø—Ä–∏ –°–æ—é–∑–µ —Ç–∞–∫–æ–≥–æ –Ω–µ –±—ã–ª–æ'. "
            "–ú–æ–∂–Ω–æ –±—ã—Ç—å —Å–ª–µ–≥–∫–∞ –≤–æ—Ä—á–ª–∏–≤—ã–º –∏ –µ—Ö–∏–¥–Ω—ã–º."
        ),
    },
]


BOT_USERNAMES = [bot["username"] for bot in BOTS]

def dynamic_probability(comment_count: int) -> float:    
    # –ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ç—Ä–µ–¥–µ, —Ç–µ–º –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞.
    if comment_count <=3:
        return 0.9
    elif comment_count <=7:
        return 0.6
    elif comment_count <=12:
        return 0.3
    else:
        return 0.15
    
# ---------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ----------

def generate_bot_reply_sync(instance, bot_profile):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ (–¥–ª—è threading —Ä–µ–∂–∏–º–∞)"""
    try:
        # If there was already an answer ‚Üí exit
        if getattr(instance, "bot_replied", False):
            logger.info(f"[{bot_profile[
                'username']}] SKIP: bot already replied to comment {instance.id}"
                )
            return            
        
        username = bot_profile["username"]
        bot_user = ensure_bot_user(bot_profile)
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        if not hasattr(settings,'OLLAMA_MODEL') or not settings.OLLAMA_MODEL:
            logger.error(f"[{username}] OLLAMA_MODEL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings")
            return
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∫–æ–º–º–µ–Ω—Ç–æ–≤
        recent_comments = Comment.objects.filter(
            post=instance.post).order_by("-created_at")[:5]
        dialogue = "\n".join(
            f"{c.author.username}: {c.content}" for c in reversed(recent_comments))
                       
        logger.info(f"[{username}] –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç id={instance.id}")
        
        # chance to switch target from last to random
        target_comment = instance
        if random.random() < 0.3:
            target_comment = Comment.objects.filter(post=instance.post).order_by("?").first()
            
        # chance for a short interruption without generation
        if random.random() < 0.2:
            reply_text = random.choice([
                "–ª–æ–ª", "–≥—ã", "—Å–∫–∞–∑–∞–ª —Ç–æ–∂–µ –º–Ω–µ", "–∞–≥–∞-–∞–≥–∞",
                "*–∑–µ–≤–∞–µ—Ç*", "*—Ä–∂—ë—Ç*", "*—Ü–æ–∫–∞–µ—Ç —è–∑—ã–∫–æ–º*"
            ])
        else:           
        
            #  –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama
            try:
                client = get_ollama_client()
                response = client.chat(
                    model=settings.OLLAMA_MODEL,
                        messages=[
                        {"role": "system", "content": bot_profile["style"]},
                        {"role": "user", "content": f"–í–æ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ:\n{dialogue}\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç –≤ —Å–≤–æ—ë–º —Å—Ç–∏–ª–µ. –ö—Ä–∞—Ç–∫–æ, –º–µ—Ç–∫–æ, —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º."}
                    ],
                    stream=False
                )
            except Exception as ollama_error:
                logger.error(f"[{username}] –û—à–∏–±–∫–∞ Ollama: {ollama_error}")
                reply_text = "ü§∑ Model is temporarily unavailable."
            else:
                reply_text =  clean_response(response["message"]["content"].strip())
                if not reply_text or len(reply_text) < 3:
                    reply_text = "ü§∑ Nothing to say."

            # –∏–º–∏—Ç–∞—Ü–∏—è "–ø–æ–¥—É–º–∞–ª –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º"
            #time.sleep(random.randint(2, 6))
                
            # making response     
            bot_comment = Comment.objects.create(
                post=instance.post,
                author=bot_user,
                content=reply_text,
                bot_replied=True
            )
            
            # set a flag that there was a response to instance
            instance.bot_replied = True
            instance.save(update_fields=["bot_replied"])
            
            # push to WebSocket
            print(f"üì° CALL notify_new_comment for post=================={bot_comment.post_id}, id={bot_comment.id}")
            notify_new_comment(bot_comment)
            
            logger.info(f"[{username}] –æ—Ç–≤–µ—Ç–∏–ª: {reply_text[:60]}...")

    except Exception as e:
        logger.error(f"[{bot_profile.get('username', 'BOT')} ERROR] {e}")   
    
@receiver(post_save, sender=Comment)
def fight_back(sender, instance, created, **kwargs):
    if not created:
        return
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ—Å—Ç–µ*(–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å - —Å—á–∏—Ç–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
    comment_count = Comment.objects.filter(post=instance.post).count()
    User = get_user_model()
    
     # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä ‚Äî –±–æ—Ç ‚Üí –∏–≥–Ω–æ—Ä–∏–º
    if instance.author.username in BOT_USERNAMES:
        logger.info(f"[BOT IGNORED] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {instance.author.username}")
        return

    logger.info(f"[USER COMMENT] –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç –æ—Ç {instance.author.username}")
    
    # –ö–∞–∂–¥—ã–π –±–æ—Ç —Ä–µ—à–∞–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç 
    for bot in BOTS:
        prob = dynamic_probability(comment_count)
        
        if random.random() < prob:
            logger.info(f"[{bot['username']}] –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {prob:.2f} —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç.")
              
            # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Celery –∏ threading                                       
            if getattr(settings, "USE_CELERY", False):
                # Celery —Ä–µ–∂–∏–º
                logger.info(f"[{bot['username']}] –ó–∞–ø—É—Å–∫–∞—é Celery-–∑–∞–¥–∞—á—É")
                generate_bot_reply_task.delay(instance.id, bot)
            
            else:
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (threading)
                logger.info(f"[{bot['username']}] –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Ç–æ–∫ (threading)")
                thread = threading.Thread(
                    target=generate_bot_reply_sync,
                    args=(instance, bot),
                    daemon=True # –ø–æ—Ç–æ–∫ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                )
                thread.start()
                 
        else:
            logger.debug(f"[{bot['username']}] –ü—Ä–æ–ø—É—Å—Ç–∏–ª (p={prob:.2f})")
        
       
            
            
