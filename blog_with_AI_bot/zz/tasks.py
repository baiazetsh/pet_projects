#tasks.py
from celery import shared_task
from zz.models import Post, Chapter, Comment
from ollama import Client
from django.contrib.auth import get_user_model
from django.conf import settings
import re
import time
import random
import logging

logger = logging.getLogger(__name__)

def clean_response(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (<think>...</think>)."""
    return re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL).strip()

def ensure_bot_user(bot_profile):
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–±–æ—Ç–∞"""
    User = get_user_model()
    from django.db.utils import IntegrityError
    try:
        bot_user, _  = User.objects.get_or_create(
            username=bot_profile["username"],
            defaults={
                'email': f"{bot_profile['username'].lower()}@site.com",
                'is_active':True,
            }
        )
        return bot_user
    except IntegrityError:
        return User.objects.get(username=bot_profile["username"])

@shared_task
def generate_post(chapter_id, title):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–æ–≤ Ollama API.
    """
    chapter = Chapter.objects.get(id=chapter_id)
    body = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è: {title}"
    post = Post.objects.create(
        chapter=chapter,
        title=title,
        content=body,
        )
    return {"post_id": post.id, "title": title}

# –æ—Ç–¥–µ–ª—å–Ω–∞—è Celery –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–æ–≤
@shared_task
def generate_bot_reply_task(comment_id, bot_profile):
    """Celery –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
    try:
        instance = Comment.objects.get(id=comment_id)
        username = bot_profile["username"]
        bot_user = ensure_bot_user(bot_profile)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        if not hasattr(settings, 'OLLAMA_MODEL') or not settings.OLLAMA_MODEL:
            logger.error(f"[{username}] OLLAMA_MODEL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings")
            return {"error": "OLLAMA_MODEL not configured"}
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∫–æ–º–º–µ–Ω—Ç–æ–≤
        recent_comments = Comment.objects.filter(post=instance.post).order_by("created_at")[:5]
        dialogue = "\n".join(f"{c.author.username}:{c.content}" for c in reversed(recent_comments))
        
        logger.info(f"[{username}] –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç id={instance.id}")
        
        # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
        try:
            client = Client()
            response = client.chat(
                model=settings.OLLAMA_MODEL,
                messages=[
                    {"role": "system", "content": bot_profile["style"]},
                    {"role": "user", "content": f"–í–æ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ:\n{dialogue}\n\n–î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç."}
                ],
                stream=False
            )
        except Exception as ollama_error:
            logger.error(f"[{username}] –û—à–∏–±–∫–∞ Ollama: {ollama_error}")
            reply_text = "ü§∑ –ú–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        else:
            reply_text = clean_response(response["message"]["content"].strip())
            if not reply_text or len(reply_text) < 3:
                reply_text = "ü§∑ –ù–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å."

        # –∏–º–∏—Ç–∞—Ü–∏—è "–ø–æ–¥—É–º–∞–ª –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º"
        time.sleep(random.randint(2, 6))
                
        comment = Comment.objects.create(
            post=instance.post,
            author=bot_user,
            content=reply_text
        )

        logger.info(f"[{username}] –æ—Ç–≤–µ—Ç–∏–ª: {reply_text[:60]}...")
        
        return {
            "success": True,
            "comment_id": comment.id,
            "bot": username,
            "reply": reply_text[:60]
        }

    except Comment.DoesNotExist:
        logger.error(f"Comment with id={comment_id} not found")
        return {"error": f"Comment {comment_id} not found"}
    except Exception as e:
        logger.error(f"[{bot_profile.get('username', 'BOT')} ERROR] {e}")
        return {"error": str(e)}
    